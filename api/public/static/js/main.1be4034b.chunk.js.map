{"version":3,"sources":["App.js","DeckCreator.js","serviceWorker.js","index.js"],"names":["App","props","state","id","className","style","color","textShadow","href","React","Component","recognition","webkitSpeechRecognition","window","continous","autoStart","interimResults","lang","DeckCreator","transcript","onresult","event","results","confidence","axios","post","onend","start","toggleListen","bind","handleListen","this","textAlign","Boolean","location","hostname","match","routing","basename","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRA2BeA,G,kBAvBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAMjB,OACE,yBAAKC,GAAG,aACN,4BAAQC,UAAU,mBAChB,yBAAKA,UAAU,iCACb,wBAAIA,UAAU,QAAd,YACA,wBAAIA,UAAU,OAAOC,MAAO,CAACC,MAAO,OAAQC,WAAY,qBACtD,yEAEF,uBAAGH,UAAU,2CAA2CI,KAAK,kBAA7D,sBAEF,yBAAKJ,UAAU,kB,GAjBPK,IAAMC,Y,wBCElBC,EAAc,IADMC,EADMC,OAAOD,yBAIvCD,EAAYG,WAAY,EACxBH,EAAYI,WAAY,EACxBJ,EAAYK,gBAAiB,EAC7BL,EAAYM,KAAO,Q,IAsDJC,E,YAnDb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXS,YAAaA,EACbQ,WAAY,IAGdR,EAAYS,SAAW,SAASC,GAC1BA,EAAMC,QAAQ,GAAG,GAAGC,WAAa,KAEnCC,IAAMC,KAAK,cAAe,CACxBN,WAAYE,EAAMC,QAAQ,GAAG,GAAGH,cAKtCR,EAAYe,MAAQ,SAASL,GAC3BV,EAAYgB,SAGd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAtBH,E,4EA0BjBE,KAAK7B,MAAMS,YAAYgB,U,kFAQvBI,KAAKH,iB,+BAIL,OACE,yBAAKvB,MAAO,CAAC2B,UAAW,WACtB,yBAAK7B,GAAG,kBAGR,yBAAKA,GAAG,eACN,kC,GA7CgBM,IAAMC,WCAZuB,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2D,mBCVAC,EACJ,kBAAC,IAAD,CAAQC,SAAS,KACb,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzC,IACjC,kBAAC,IAAD,CAAOwC,KAAK,gBAAgBC,UAAWvB,KAI7CwB,IAASC,OAAON,EAASO,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1be4034b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div id=\"home-page\">\n        <header className=\"masthead d-flex\">\n          <div className=\"container text-center my-auto\">\n            <h1 className=\"mb-1\">AutoDeck</h1>\n            <h3 className=\"mb-5\" style={{color: \"#eee\", textShadow: \"2px 2px 5px #111\"}}>\n              <em>Create pitch decks from your voice alone</em>\n            </h3>\n            <a className=\"btn btn-primary btn-xl js-scroll-trigger\" href=\"#/deck-creator\">Create Pitch Deck</a>\n          </div>\n          <div className=\"overlay\"></div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport axios from 'axios';\n\nconst webkitSpeechRecognition = window.webkitSpeechRecognition\nconst SpeechRecognition = webkitSpeechRecognition\nconst recognition = new SpeechRecognition()\n\nrecognition.continous = true\nrecognition.autoStart = false\nrecognition.interimResults = true\nrecognition.lang = 'en-US'\n\nclass DeckCreator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recognition: recognition,\n      transcript: '',\n    };\n\n    recognition.onresult = function(event) {\n      if (event.results[0][0].confidence > 0.95) {\n        //console.log(event.results[0][0].transcript);\n        axios.post('/api/record', {\n          transcript: event.results[0][0].transcript\n        })\n      }\n    };\n\n    recognition.onend = function(event) {\n      recognition.start();\n    }\n\n    this.toggleListen = this.toggleListen.bind(this)\n    this.handleListen = this.handleListen.bind(this)\n  }\n\n  toggleListen() {\n    this.state.recognition.start();\n  }\n  \n  handleListen(){\n    // handle speech recognition here \n  }\n\n  componentDidMount() {\n    this.toggleListen();\n  }\n\n  render() {\n    return (\n      <div style={{textAlign: \"center\"}}>\n        <div id=\"google-slides\">\n          \n        </div>\n        <div id=\"live-speech\">\n          <p></p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DeckCreator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport DeckCreator from './DeckCreator';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\n\nconst routing = (\n  <Router basename=\"#\">\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/deck-creator\" component={DeckCreator} />\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}